using DevExpress.CodeParser;
using DevExpress.Data.Filtering;
using DevExpress.DXperience.Demos.CodeDemo.Data;
using DevExpress.Utils;
using DevExpress.Utils.Behaviors;
using DevExpress.Utils.Behaviors.Common;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraExport.Helpers;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Reflection.Emit;
using System.Threading;
using System.Windows.Forms;

namespace DataGrid01
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            //sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            processLogsTableAdapter1.Fill(ıdeasoftDataSet1.ProcessLogs);
        }

        public void ShowButtonGrid()
        {
            // Show a button in a grid cell            
            RepositoryItemButtonEdit edit = new RepositoryItemButtonEdit();
            edit.ButtonClick += (sender, e) =>
            {
                if (e.Button.Kind == ButtonPredefines.Delete)
                {
                    if (XtraMessageBox.Show("Do you wish to remove this row?", "Confirmation Dialog", MessageBoxButtons.YesNo) == DialogResult.Yes)
                    {
                        gridView.DeleteRow(gridView.FocusedRowHandle);
                    }
                }
            };
            edit.Buttons[0].Kind = ButtonPredefines.Delete;
            edit.Buttons[0].Caption = "Custom Button";
            gridControl.RepositoryItems.Add(edit);
            GridColumn column = gridView.Columns["ID"];
            column.ColumnEdit = edit;
            column.ShowButtonMode = ShowButtonModeEnum.ShowAlways;


        }
        public void AddVisible()
        {
            // ShowButtonGrid();
            // The AutoPopulateColumns property is used to determine
            // whether columns should be created automatically for all fields in the underlying data source 
            // when the View doesn't contain columnsany 
            gridView.OptionsBehavior.AutoPopulateColumns = false;
            // The AddVisible method adds a new column, binds it to the specified field and makes this column visible
            gridView.Columns.AddVisible("ID");
            gridView.Columns.AddVisible("Name");
        }
        public void ColorScaleRule()
        {
            GridColumn colMark = gridView.Columns["Mark"];
            FormatConditionRuleValue markRule = new FormatConditionRuleValue();
            markRule.Condition = FormatCondition.Expression;
            markRule.Expression = string.Format("[{0}] == false", "Mark");
            markRule.Appearance.BackColor = Color.LightGreen;
            gridView.FormatRules.Add(colMark, markRule);

            GridColumn colLength = gridView.Columns["Length"];
            GridColumn colName = gridView.Columns["Name"];
            GridFormatRule typeOfObjectRule = new GridFormatRule();
            FormatConditionRule2ColorScale colorScaleRule = new FormatConditionRule2ColorScale();
            typeOfObjectRule.Column = colLength;
            typeOfObjectRule.ColumnApplyTo = colName;
            colorScaleRule.PredefinedName = "White, Red";
            typeOfObjectRule.Rule = colorScaleRule;
            gridView.FormatRules.Add(typeOfObjectRule);

        }


        private void btnTest_Click(object sender, EventArgs e)
        {
            //BehaviorManager();
            //  gridView.OptionsBehavior.EditingMode = GridEditingMode.EditForm;





            gridView.RefreshData();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'iDEASOFTDataSet.ProcessLogs' table. You can move, or remove it, as needed.
            this.processLogsTableAdapter.Fill(this.iDEASOFTDataSet.ProcessLogs);
            ProcessLogDal processLogDal = new ProcessLogDal();
            gridControl.DataSource = processLogDal.GetAll();
            MembersDal membersDal = new MembersDal();
            
            lookUpEdit1.Properties.DataSource = membersDal.GetAll();
            






            gridView.OptionsBehavior.Editable = false;



            //GridColumn colAct = gridView.Columns["Act"];
            //Dictionary<string, Color> conditionColors = new Dictionary<string, Color>
            //{
            //   { "update", Color.FromArgb(193, 205, 193) }, 
            //   { "add", Color.FromArgb(193,200,190) },     
            //   { "edit", Color.FromArgb(176,179,175) },   
            //   { "pro_entegrasyon", Color.FromArgb(244, 238, 224) }, 
            //   { "logout", Color.FromArgb(179,191,174) },
            //   { "login", Color.FromArgb(182,189,178) },
            //   { "updateStatusPassive", Color.FromArgb(244, 238, 224) },
            //   { "passPriceUpdate", Color.FromArgb(190, 250, 205) },
            //   { "updateStatusActive", Color.FromArgb(255, 250, 205) },
            //   { "delete", Color.FromArgb(176,184,172) },



            //};
            //foreach (var conditionColor in conditionColors)
            //{
            //    FormatConditionRuleValue rule = new FormatConditionRuleValue();
            //    rule.Condition = FormatCondition.Equal;
            //    rule.Value1 = conditionColor.Key;
            //    rule.Appearance.BackColor = conditionColor.Value;

            //    gridView.FormatRules.Add(colAct, rule);
            //}

            //GridColumn colModule = gridView.Columns["Module"];
            //Dictionary<string, Color> conditionColors2 = new Dictionary<string, Color>
            //{
            //   { "member", Color.FromArgb(237,226,239) },
            //   { "order", Color.FromArgb(207, 216, 220) },
            //   { "scriptTag", Color.FromArgb(176, 190, 197) },
            //   { "status", Color.FromArgb(144, 164, 174) },
            //   { "member_group", Color.FromArgb(120, 144, 156) },
            //   { "admin", Color.FromArgb(96, 125, 139) },
            //   { "category", Color.FromArgb(84, 110, 122) },
            //   { "productPrice", Color.FromArgb(69, 90, 100) },
            //   { "currency", Color.FromArgb(217,233,233) },
            //   { "product_image", Color.FromArgb(38, 50, 56) },
            //   { "products", Color.FromArgb(224, 224, 224) },
            //   { "product", Color.FromArgb(224, 224, 224) },
            //   { "auth", Color.FromArgb(189, 189, 189) },
            //   { "draft_order", Color.FromArgb(238, 238, 228) },
            //   { "catalog", Color.FromArgb(197, 202, 233) },
            //   { "users", Color.FromArgb(232, 234, 246) },
            //   { "dynamic", Color.FromArgb(187,203,203) },
            //   { "blog", Color.FromArgb(246,235,241) },




            //};
            //foreach (var conditionColor2 in conditionColors2)
            //{
            //    FormatConditionRuleValue rule = new FormatConditionRuleValue();
            //    rule.Condition = FormatCondition.Equal;
            //    rule.Value1 = conditionColor2.Key;
            //    rule.Appearance.BackColor = conditionColor2.Value;

            //    gridView.FormatRules.Add(colModule, rule);
            //}




            //gridControl.DataSource = SampleData.GetData(6);
            //gridControl.DataSource = sqlDataSource1;
            //gridView.RefreshData();
        }

        Color deleteBackColor = Color.Red;

        private void gridView_RowStyle(object sender, RowStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle >= 0)
            {
                string columnName = "Act";
                string value = view.GetRowCellValue(e.RowHandle, columnName).ToString();

                // Renklendirme koşulunu burada belirleyin

                if (value == "delete")
                {
                    RowColor(e,deleteBackColor);
                }
                if (value == "add")
                {
                    RowColor(e, Color.Green);
                }
                if (value.ToString() == "update")
                {
                    RowColor(e, Color.Blue);
                }
                if (value == "login")
                {
                    RowColor(e, Color.BlueViolet);
                }
                if (value == "logout")
                {
                    RowColor(e, Color.Coral);
                }
                if (value == "edit")
                {
                    RowColor(e, Color.DeepPink);
                }
            }
        }

        private static void RowColor(RowStyleEventArgs e,Color foreColor)
        {
            e.Appearance.ForeColor = foreColor;
            e.Appearance.BackColor = Color.White;
        }

        private void gridView_CustomFilterDialog(object sender, CustomFilterDialogEventArgs e)
        {
            foreach (GridColumn col in gridView.Columns)
                col.OptionsFilter.FilterPopupMode = FilterPopupMode.List;
            // The CustomFilterDialog event allows replacing the default CustomFilterDialog with custom filtering facilities.
            gridView.CustomFilterDialog += (s, events) =>
            {
                gridView.GridControl.BeginInvoke(new MethodInvoker(() =>
                {
                    gridView.ShowFilterEditor(e.Column);
                }));
                events.Handled = true;

            };
        }

        private void btnFiltrele_Click(object sender, EventArgs e)
        {
            DateTime baslangicTarihi = dateEditBaslangic.DateTime;
            DateTime bitisTarihi = dateEditBitis.DateTime;
            string filtre = string.Format("[CreatedAt] >= #{0:M/d/yyyy}# And [CreatedAt] <= #{1:M/d/yyyy}#", baslangicTarihi, bitisTarihi);

            gridView.ActiveFilterString = filtre;
        }

      
        private void lookUpEdit1_EditValueChanged(object sender, EventArgs e)
        {

        }


        //private void gridView_EditFormPrepared(object sender, EditFormPreparedEventArgs e)
        //{
        //    foreach (Control item in e.BindableControls)
        //    {
        //        DateEdit dateEdit = null;
        //        dateEdit = item as DateEdit;
        //        if (dateEdit != null)
        //        {
        //            // Focus the DateEdit editor
        //            gridControl.BeginInvoke(new MethodInvoker(() => { dateEdit.Focus(); }));
        //            return;
        //        }
        //    }
        //    }
    }

}
